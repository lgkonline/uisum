{
    "src\\ActionMenu.js": {
        "description": "Das Action-Menü an der oberen rechten Ecke einer Seite. Hier können Aktionen platziert werden, die im Kontext der aktuellen Seite stehen.",
        "displayName": "ActionMenu",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleActions",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "initToggleStatus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "hideToggleAction": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Versteckt die drei Punkte in mobiler Ansicht.\r\nDas kann nützlich sein, wenn mehrere ActionMenus genutzt werden, aber nicht überall der Toggle angezeigt werden soll.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "src\\ActionMenuItem.js": {
        "description": "List-Item und Link für das Action-Menü.",
        "displayName": "ActionMenuItem",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"javascript:void(0)\"",
                    "computed": false
                }
            },
            "icon": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Klasse eines Icons"
            },
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Beschriftung des Links"
            }
        }
    },
    "src\\ActionMenuSwitch.js": {
        "description": "Switch für das Action-Menü.",
        "displayName": "ActionMenuSwitch",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "checked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Beschriftung des Controls"
            },
            "href": {
                "defaultValue": {
                    "value": "\"javascript:void(0)\"",
                    "computed": false
                },
                "required": false
            }
        }
    },
    "src\\Body.js": {
        "description": "Enthält den Inhalt einer Seite.",
        "displayName": "Body",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "containerClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Setzt die Klasse für den Container. Mehr Infos unter https://getbootstrap.com/docs/4.0/layout/overview/#containers",
                "defaultValue": {
                    "value": "\"container-fluid\"",
                    "computed": false
                }
            }
        }
    },
    "src\\Caret.js": {
        "description": "Caret icon component.",
        "displayName": "Caret",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "open": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Indicates if open or not.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "mirrored": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "By default the caret points to the right when closed. Set mirrored and it will point to the left.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport { Caret } from \"uisum\";\r\n\r\nclass CaretExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => this.setState({ isOpen: !this.state.isOpen })}\r\n                >\r\n                    <Caret\r\n                        open={this.state.isOpen}\r\n                    />\r\n                    {\" \"}<span>See what happens when you click here</span>\r\n                </button>\r\n                {this.state.isOpen &&\r\n                    <div className=\"bg-dark text-white p-2 my-2\">\r\n                        This is visible now!\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaretExample;"
    },
    "src\\FluentBtn.js": {
        "description": "Shortcut für <code>&lt;button class=\"fluent-btn\"&gt;&lt;div className=\"fluent-btn-ball\"&gt;&lt;/div&gt;&lt;/button&gt;</code>.\r\nErzeugt Button, mit einem Acrylic-Effekt.",
        "displayName": "FluentBtn",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Inhalt des Buttons. Es werden auch alle anderen Properties unterstützt."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Wenn gesetzt, wird ein <code>&lt;a&gt;</code>-Element zurückgegeben. Ansonsten ist es ein <code>&lt;button&gt;</code>."
            },
            "light": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Kann bei Schaltflächen mit weißen Flächen gesetzt werden. Der Schein ist dann etwas dunkler.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport { FluentBtn, Utilities } from \"uisum\";\r\n\r\nclass FluentBtnExample extends React.Component {\r\n    componentDidMount() {\r\n        // On normal usage inside of <Page /> the following isn't necessary. You only need it when <FluentBtn /> gets embedded async.\r\n        Utilities.registerFluentBtns();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FluentBtn\r\n                    className=\"btn btn-primary btn-lg\"\r\n                >\r\n                    Hover over this button and see the fancy fluent effect\r\n                </FluentBtn>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FluentBtnExample;"
    },
    "src\\Grid.WithLocalStorage.js": {
        "description": "Das Grundgerüst von  App. Objekt wird über window.uiGridRef global ansprechbar sein.<br>\r\nAußerdem kann über <code>uiGridRef.addEventListener(eventName, (prevProps, prevState) => { })</code> ein Event-Listener angefügt werden.\r\n<br><br>\r\n<h3 class=\"mt-4 mb-3\">Allowed event listeners</h3>\r\n<table class=\"table\">\r\n<thead><tr><th>Event name</th><th>Description</th><th>Example</th></tr></thead>\r\n<tbody>\r\n<tr>\r\n<th>componentDidUpdate</th>\r\n<td>Komponente wurde aktualisiert.</td>\r\n<td><code>uiGridRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidShowAgain</th>\r\n<td>Seite wurde erneut angezeigt, mit altem Stand. Im Callback kann Komponente neu initialisiert werden.</td>\r\n<td><code>uiGridRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidHide</th>\r\n<td>Seite wurde versteckt (andere Seite wurde angezeigt).</td>\r\n<td><code>uiGridRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n</tbody>\r\n</table>",
        "displayName": "Grid",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "setLocalStorageState",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "stateName",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "setLocalStorageStates",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "hideSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "e",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "initMatch",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "addEventListener",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "param1",
                        "type": null
                    },
                    {
                        "name": "param2",
                        "type": null
                    },
                    {
                        "name": "param3",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "expandSidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "The sidebar will be expanded on full view.<br>\r\nDie Sidebar ist bei Vollbild automatisch erweitert.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "expandSidebarToggleable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Makes the expanded sidebar toggleable using the menu icon button. <code>expandSidebar</code> has to be <code>true</code> for this to take effect.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "hideSidebarMenu": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Disables the sidebar.\r\nDeaktiviert die Sidebar.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "pages": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Registers pages.<br>\r\nRegistriert Seiten.<br>\r\nExample: [{name: \"home\", component: <HomePage />}]",
                "defaultValue": {
                    "value": "[]",
                    "computed": false
                }
            },
            "icons": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Let's you define the default icons.<br>\r\nLässt dich die Standard-Icons definieren.<br>\r\n<strong>Example:</strong><br><code>{<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"search\": \"fas fa-search\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"actionMenu\": \"fas fa-ellipsis-v \",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"menu\": \"fas fa-bars\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"success\": \"fas fa-check\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"info\": \"fas fa-info\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"warning\": \"fas fa-exclamation-triangle\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"danger\": \"fas fa-times\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"cancel\": \"fas fa-times\"<br>\r\n                }</code><br>",
                "defaultValue": {
                    "value": "this.defaultIcons",
                    "computed": true
                }
            },
            "footer": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "You can set a footer element that always be at the bottom of the app.<br>\r\nDu kannst ein Footer-Element setzen, das immer am Ende der App angezeigt wird.<br>\r\n<strong>Example:</strong><br><code>(<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;footer className=\"bg-white ml-sidebar-width p-3 text-center\"&gt;<br>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It's a footer<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;/footer&gt;<br>\r\n                )</code><br>"
            },
            "routerPageClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends <code>className</code> of <code>.router-page</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            }
        }
    },
    "src\\Grid.js": {
        "description": "Das Grundgerüst von  App. Objekt wird über window.uiGridRef global ansprechbar sein.<br>\r\nAußerdem kann über <code>uiGridRef.addEventListener(eventName, (prevProps, prevState) => { })</code> ein Event-Listener angefügt werden.\r\n<br><br>\r\n<h3 class=\"mt-4 mb-3\">Allowed event listeners</h3>\r\n<table class=\"table\">\r\n<thead><tr><th>Event name</th><th>Description</th><th>Example</th></tr></thead>\r\n<tbody>\r\n<tr>\r\n<th>componentDidUpdate</th>\r\n<td>Komponente wurde aktualisiert.</td>\r\n<td><code>uiGridRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidShowAgain</th>\r\n<td>Seite wurde erneut angezeigt, mit altem Stand. Im Callback kann Komponente neu initialisiert werden.</td>\r\n<td><code>uiGridRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidHide</th>\r\n<td>Seite wurde versteckt (andere Seite wurde angezeigt).</td>\r\n<td><code>uiGridRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n</tbody>\r\n</table>",
        "displayName": "Grid",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "hideSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "e",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "initMatch",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "addEventListener",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "param1",
                        "type": null
                    },
                    {
                        "name": "param2",
                        "type": null
                    },
                    {
                        "name": "param3",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "expandSidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "The sidebar will be expanded on full view.<br>\r\nDie Sidebar ist bei Vollbild automatisch erweitert.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "expandSidebarToggleable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Makes the expanded sidebar toggleable using the menu icon button. <code>expandSidebar</code> has to be <code>true</code> for this to take effect.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "hideSidebarMenu": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Disables the sidebar.\r\nDeaktiviert die Sidebar.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "pages": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Registers pages.<br>\r\nRegistriert Seiten.<br>\r\nExample: [{name: \"home\", component: <HomePage />}]",
                "defaultValue": {
                    "value": "[]",
                    "computed": false
                }
            },
            "icons": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Let's you define the default icons.<br>\r\nLässt dich die Standard-Icons definieren.<br>\r\n<strong>Example:</strong><br><code>{<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"search\": \"fas fa-search\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"actionMenu\": \"fas fa-ellipsis-v \",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"menu\": \"fas fa-bars\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"success\": \"fas fa-check\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"info\": \"fas fa-info\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"warning\": \"fas fa-exclamation-triangle\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"danger\": \"fas fa-times\",<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\"cancel\": \"fas fa-times\"<br>\r\n                }</code><br>",
                "defaultValue": {
                    "value": "this.defaultIcons",
                    "computed": true
                }
            },
            "footer": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "You can set a footer element that always be at the bottom of the app.<br>\r\nDu kannst ein Footer-Element setzen, das immer am Ende der App angezeigt wird.<br>\r\n<strong>Example:</strong><br><code>(<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;footer className=\"bg-white ml-sidebar-width p-3 text-center\"&gt;<br>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It's a footer<br>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&lt;/footer&gt;<br>\r\n                )</code><br>"
            },
            "routerPageClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends <code>className</code> of <code>.router-page</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            }
        }
    },
    "src\\Header.js": {
        "description": "",
        "displayName": "Header",
        "methods": []
    },
    "src\\HeaderActions.js": {
        "description": "Hier werden z.B. Buttons für die aktuelle Seite platziert.",
        "displayName": "HeaderActions",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "breakpoint": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Legt fest, ab welcher Breite umgebrochen wird. Mögliche Werte: <code>\"sm\"</code> (768px), <code>\"md\"</code> (992px), <code>\"lg\"</code> (1200px)",
                "defaultValue": {
                    "value": "\"lg\"",
                    "computed": false
                }
            }
        }
    },
    "src\\HeaderTitle.js": {
        "description": "Der Titel-Bereich in der Kopf-Leiste.",
        "displayName": "HeaderTitle",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "logo": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann ein Bild sein. Wird im src-Attribute implementiert."
            },
            "appTitle": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Der Text, der neben dem Logo steht."
            },
            "keepAppTitle": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Deaktiviert, dass der App-Titel bei bestimmer Bildschirmgröße ausgeblendet wird.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "src\\Intro.js": {
        "description": "Geeignet als Login-Bildschirm.",
        "displayName": "Intro",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "logo": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann ein Bild sein. Wird im src-Attribute implementiert."
            },
            "title": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Der Text, der unter dem Logo erscheint"
            },
            "screenClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Will extend <code>.sign-in-screen</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "containerClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Will extend <code>.sign-in-container</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Content"
            }
        }
    },
    "src\\MenuItem.js": {
        "description": "List-Item und Link für die Sidebar.",
        "displayName": "MenuItem",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "onClick",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "checkActive",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "to": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Setzt to-Property der NavLink-Komponente aus React Router."
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann als Alternative zu to benutzt werden.",
                "defaultValue": {
                    "value": "\"javascript:void(0)\"",
                    "computed": false
                }
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "onClick Event"
            },
            "icon": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Klasse eines Icons"
            },
            "label": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Beschriftung des Links"
            },
            "isActive": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Soll Item als \"aktiv\" markiert werden? Ist die to-Property gesetzt, wird Item automatisch als \"aktiv\" markiert, wenn entsprechende Seite aktiv ist.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "isHome": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Als MenuItem für Startseite deklariert.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "dropdownClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Ergänzung der Klasse vom Dropdown-Menü.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Werden in einem Dropdown-Menü angezeigt."
            },
            "stacked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Enables stacked layout. The label will be underneath the icon.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "src\\Page.js": {
        "description": "",
        "displayName": "Page",
        "methods": []
    },
    "src\\Search.js": {
        "description": "Eine Suchleiste, die zur Seitenleiste hinzugefügt werden kann.",
        "displayName": "Search",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "sidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Wird Komponente in der Sidebar genutzt?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "body": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Wird Komponente im Body genutzt?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "reset": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Erlaube Zurücksetzen?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "value": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "(event) => { }",
                    "computed": false
                }
            },
            "onSubmit": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "(event) => { }",
                    "computed": false
                }
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "autoFocus": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport { Search } from \"uisum\";\r\n\r\nclass SearchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            search: \"\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    body\r\n                    reset\r\n                    value={this.state.search}\r\n                    onChange={({ target }) => this.setState({ search: target.value })}\r\n                    onSubmit={() => alert(\"Do form submit now!\")}\r\n                    placeholder=\"Begin typing...\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchExample;"
    },
    "src\\SidebarMenu.js": {
        "description": "Die Seitenleiste für das Grid.",
        "displayName": "SidebarMenu",
        "methods": [],
        "props": {
            "sidebarClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Erweiterung der className-Property der Seitenleiste."
            },
            "sidebarStyle": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Setzt die style-Property der Seitenleiste."
            },
            "menuClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Erweiterung der className-Property des Menüs."
            },
            "menuStyle": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Setzt die style-Property des Menüs."
            },
            "bottomContent": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Inhalte für den Footer der Sidebar"
            }
        }
    },
    "src\\Switch.js": {
        "description": "Switch.",
        "displayName": "Switch",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "checked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "() => { }",
                    "computed": false
                }
            },
            "sliderLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Sets label inside of the switch. If you set this, you should also set the className \"lg\" to make the switch larger.",
                "defaultValue": {
                    "value": "null",
                    "computed": false
                }
            },
            "elementType": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "You can change the type of the wrapper element. If you do, the <code>onChange</code> event might not be triggered.",
                "defaultValue": {
                    "value": "\"label\"",
                    "computed": false
                }
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport { Switch } from \"uisum\";\r\n\r\nclass SwitchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isChecked: true\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <h4>Normal switch</h4>\r\n\r\n                    <Switch\r\n                        checked={this.state.isChecked}\r\n                        onChange={() => this.setState({ isChecked: !this.state.isChecked })}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    <h4>Switch with a slider label</h4>\r\n\r\n                    <Switch\r\n                        className=\"lg\"\r\n                        checked={this.state.isChecked}\r\n                        onChange={() => this.setState({ isChecked: !this.state.isChecked })}\r\n                        sliderLabel={this.state.isChecked ? \"🎉\" : \"😒\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SwitchExample;"
    },
    "src\\Tabs.js": {
        "description": "Shows tab bar on the bottom side. Can be filled with <code>&lt;MenuItem stacked /&gt;</code> elements.",
        "displayName": "Tabs",
        "methods": [],
        "props": {
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": ""
            },
            "mobileOnly": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Tabs will only be visible on smaller screens (Bootstrap's \"sm\")."
            }
        }
    }
}